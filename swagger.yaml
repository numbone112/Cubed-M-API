---
swagger: "2.0"
info:
  description: "This is a wep app for Cubed M.\n
    \ Cubed M is a assistive motion software. The core concept is motivative more movement\
    \
    "
  version: "1.0.1"
  title: "Cubed M"
  contact:
    email: "numbone112@gmail.com"

host: "e-fu-back.onrender.com"
basePath: "/"
tags:
  - name: "user"
    description: "Operations about user"

  - name: "mo"
    description: "power of community to take you move"
  - name: "invite"
    description: "invite somebody who you want to exercise together"

schemes:
  - "https"
  - "http"
paths:
  /login:
    post:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "query"
          description: "The user id for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        default:
          description: "successful operation"
  /sign:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  #這是啥我忘記了
  /user/createWithArray:
    post:
      tags:
        - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      consumes:
        - "application/json"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - in: "body"
          name: "body"
          description: "List of user object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  #這是啥我忘記了
  /user/createWithList:
    post:
      tags:
        - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      consumes:
        - "application/json"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - in: "body"
          name: "body"
          description: "List of user object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
# 看個人資料、更新、刪除帳號
  /user/{userID}:
    get:
      tags:
        - "user"
      summary: "Get user by user ID"
      description: ""
      operationId: "getUserByID"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "userID"
          in: "path"
          description: "The ID that needs to be fetched. Use 11136001 for testing. "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Profile"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"

    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/Profile"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"

  /user/logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
        - "application/json"
        - "application/xml"
      parameters: []
      responses:
        default:
          description: "successful operation"

# 隱藏mo伴及mo伴清單
  /mo/{userId}:
    post:
      tags:
        - "mo"
      summary: "Hidden somebody who you don't want to see in your mo friend list or cancel hiddening"
      description: "Returns a list of your mo friend"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - name: "moId"
          in: "query"
          description: "ID of moId"
          required: true
          type: "integer"
          format: "int64"
        - name: "operation"
          in: "query"
          description: "0 means hiddening and 1 means appear"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ApIResponse"
        400:
          description: "Invalid ID supplied"
        404:
          description: "user not found"
      security:
        - api_key: []

    get:
      tags:
        - "mo"
      summary: "Find mo friend who have exercised with you together  by ID"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "user not found"
  /invite/list/{m_id}/{int:mode}:
    get:
      tags:
        - "invite"
      summary: "search my invite"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Invite"
        400:
          description: "Invalid ID supplied"
        404:
          description: "user not found"
  /invite/{m_id}: 
    post:
      tags:
        - "invite"
      summary: "create a invite"
      description: ""
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of 召集人"
          required: true
          type: "integer"
          format: "int64"
        - name: "friend"
          in: "query"
          description: "ID of mo friend"
          required: true
          type: "array"

        - name: "name"
          in: "query"
          description: "name of invite"
          required: true
          type: "string"
        - name: "time"
          in: "query"
          description: "time of exercise"
          required: true
          type: "string"
          format: "int64"
        - name: "remark"
          in: "query"
          description: "remark of invite"
          required: true
          type: "string"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/ApIResponse"
        400:
          description: "Invalid ID supplied"
        404:
          description: "user not found"
      security:
        - api_key: []
  
  /invite/{m_id}/{id}:
    
    get:
      tags:
        - "invite"
      parameters:
        - name: "id"
          in: "path"
          description: ""
          required: true
          type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Invite_detail"
        400:
          description: "Invalid ID supplied"
        404:
          description: "user not found"

      deprecated: false
    put:
      tags:
        - "invite"
      summary: "update a invite"
      description: ""
      produces:
        - "application/json"
      parameters:
        - name: "a_id"
          in: "path"
          description: "ID of invite"
          required: true
          type: "integer"
          format: "int64"
        - name: "friend"
          in: "query"
          description: "ID of mo friend"
          required: true
          type: "array"
        - name: "name"
          in: "query"
          description: "name of invite"
          required: true
          type: "string"
        - name: "time"
          in: "query"
          description: "time of exercise"
          required: true
          type: "string"
          format: "int64"
        - name: "remark"
          in: "query"
          description: "remark of invite"
          required: true
          type: "string"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/ApIResponse"
        400:
          description: "Invalid ID supplied"
        404:
          description: "user not found"
    post:
      tags:
        - "invite"
      summary: "do you want to accept the invite"
      parameters:
        - name: "accept"
          in: "query"
          description: ""
          required: true
          type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/ApIResponse"
        400:
          description: "Invalid ID supplied"
        404:
          description: "user not found"
    
  /history/list/{id}:
    get:
      tags:
        - "history"
      parameters:
        - name: 'id'
          in: 'path'
          required: true
          type: 'string'
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Histories"
  /history/list/{id}/{h_id}:
     get:
      tags:
        - "history"
      parameters:
        - name: 'id'
          in: 'path'
          required: true
          type: 'string'
        - name: 'h_id'
          in: 'path'
          type: 'string'
          required: true
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/HistoryDetail"



        

definitions:
  ApIResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Invite:
    type: "object"
    properties:
      id:
        type: "integer"
      m_id:
        type: "string"
      friend:
        type: "array"
      time:
        type: "string"
      remark:
        type: "string"
  Invite_detail:
    type: "object"
    properties:
      id:
        type: "integer"
      a_id:
        type: "integer"
      user_id:
        type: "string"
      accept:
        type: "boolean"
      done:
        type: "array"
  Profile:
    type: 'object'
    properties:
      id:
        type: 'string'
      name: 
        type: 'string'
      sex:
        type: 'string'
      birthday:
        type: 'string'
      phone:
        type: 'string'
      height:
        type: 'number'
      weight:
        type: 'number'
      disease:
        type: 'object'
        $ref: '#/definitions/Disease'
  Disease:
    type: 'object'
    properties:
      name:
        type: 'string'
  Histories:
    type: 'object'
    properties:
      name:
        type: 'string'
      time: 
        type: 'string'
      m_name:
        type: 'string'
      friends:
        type: 'object'
        $ref: '#/definitions/friends'
      avg_score:
        type: 'number'
      score:
        type: 'number'
      items: 
        type: 'string'
  HistoryDetail:
    type: 'object'
    properties:
      name:
        type: 'string'
      friends: 
        type: 'object'
        $ref: '#/definitions/HistoryScore'

      
      

  friends:
    type: 'object'
    properties:
      name: 
        type: 'string'
      id:
        type: 'string'

  HistoryScore:
    type: 'object'
    properties:
      name:
        type: 'string'
      score:
        type: 'number'
      items: 
        type: 'object'
        $ref: '#/definitions/HistoryItemScore'


  
  HistoryItemScore:
    type: 'object'
    properties:
      name:
        type: 'string'
      count:
        type: 'integer'
      score:
        type: 'number'







externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
